 [ec2 배포 : 키 페어 형성과 접근]
-> pem을 통해 ec2 instance에 접근한다. 절대 잃어버리지 않도록 주의
-> ssh ec2-user@ec2-15-164-222-199.ap-northeast-2.compute.amazonaws.com -i ~/Desktop/aws/waffle-toyproject.pem 와 같은 방식으로 ec2에 접속해준다.
-> WARNING: UNPROTECTED PRIVATE KEY FILE! : pem 키는 보안에 민감한데, 너무 개방적이기 때문에 발생하는 에러이다.
-> pem 디렉토리에서 ls -l 로 확인한다. 앞의 r, w등은 이진수로 이루어진 보안 수준이다. chmod 400 {해당pem키 경로}로 권한을 제한해주면 해결된다. (ex: chmod 400 ./waffle-toyproject.pem)

-> 이제 vanila 상태의 리눅스 ec2 인스턴스로 연결된다

[aws rds : 배포와 설정]
	MySQL / 프리티어
	인스턴스 식별자 : db명
	마스터사용자 암호 설정하기 : password
	퍼블릭 엑세스 가능 : 실제 배포상황이라면 아니오지만, 테스트, 개발 환경에선 가능으로.
	보안 그룹 : 상기 언급한 바 디폴트 엄금.
-> 생성한 후 보안그룹에서 꼭 MySQL/Aurora로 포트 열어주기
-> rds를 팠으면, 그 rds를 로컬에서 조회할 수 있어야 한다. 그러니까 mysql에서 로컬에 새로운 커넥션을 판다. 이때 호스트는 당연히 rds주소여야 한다. pw와 id는 위 rds만들 때 입력한 것.
-> **보안 그룹에서 같은 ec2 주소를 꼭 스스로에게 mysql로 열어줘야 한다

[settings.py 설정]
-> allowed_hosts에는 ec2의 주소를, Databases에는 rds의 주소를 입력한다.

[ec2 기본 환경 설정]
-> https://info-lab.tistory.com/160 대로 가상환경 세팅하기
-> "yum -y install gcc openssl-devel zlib-devel libffi-devel bzip2-devel sqlite-devel ncurses-devel gdbm-devel tk-devel xz-devel readline-devel"
-> ~/로 이동해서 폴더 만들기 (mkdir ~/waffle_project) 및 git clone.

OSError: mysql_config not found 
-> sudo yum install python-devel mysql-devel
-> sudo yum install python3-devel


[최종 준비]
-> settings.py 재확인. 특히 allowed_host와 db host 부분
-> runserver로 돌아가는 것 확인.


Q. 근데 왜 여기서 런서버로 열고, ec2 주소로 접속하면 안돼?
A. 우리가 443 이든 80이든 접속을 하는 것과 파이썬 코드가 무슨상관? 로컬에서만 특별히 주소로 돌려줄 뿐, 아직 실제 주소 - 파이썬과의 연계는 전혀 없는 상태이다.
-> https를 받게 해주는, 문지기가 웹 서버, Nginx이다.


[nginx 설정하기]
-> "sudo amazon-linux-extras install nginx1.12"
-> nginx 경로 : /etc/nginx/(nginx.conf)
-> sudo vi /etc/nginx/nginx.conf 에서 server부분의 location을 채워넣어야 한다. 그러나 관습상, 직접 conf를 변경하지는 않고, 외부 symbol을 설정하여 그 링크를 연결시켜준다.
우선 서버 {} 를 전부 주석처리해준다. 그 자리에 include로 대체할 거니까. tip: 일괄주석 "https://discuss.devopscube.com/t/how-to-comment-and-uncomment-multiple-line-vi-terminal-editor/64"

sudo mkdir /etc/nginx/sites-available : conf파일을 다른 곳에 만들거다. 그 파일의 dir이름은 sites-available로 하겠다.
sudo mkdir /etc/nginx/sites-enabled 

sudo vi /etc/nginx/sites-available/waffle-toyproject.conf 여기에 서버 관련 conf내용을 작성한다.
uwsgi와 nginx는 unix socket써라 훨씬 빠르다.

다시 sudo vi /etc/nginx/nginx.conf 로 와서 enabled의 conf를 include해라. *주의: 링크설정이기 때문에 바로 available에서 conf가져오지 않는다.
include /etc/nginx/sites-enabled/*.conf;

sudo ln -s /etc/nginx/sites-available/waffle-toyproject.conf /etc/nginx/sites-enabled/waffle-toyproject.conf
이걸로 sites available과 enabled간에 링크를 만든다.



[uwsgi 설정하기]
vi waffle-toyproject_uwsgi.ini 클론해온 파일 메인단(manage.py의 위치)에 ini파일 만든다. 
파일에 기본 설정 넣기

vi uwsgi_params 같은 단에 파라미터 설정 파일 필요하다. 기본 설정 붙여넣기 

팁 pwd입력하면 절대경로 나온다.

[최종 준비]
cd 로 이동해서 sudo nginx -t

uwsgi --ini /home/ec2-user/waffle-toyproject/team5-server/trelloclone/waffle-toyproject_uwsgi.ini
-> uwsgi ini파일로 초기화시켜주기

그럼 cd 에 .sock가 생기는데, 여기에 nginx를 꽂아주면 된다.

*주의. conf 파일 (available)에 변경 있었으면 enable꺼 지우고 다시 링크 형성해주기.

권한문제 해결 -> chmod 711 /home/ec2-user/



