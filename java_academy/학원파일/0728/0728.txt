kedudisk.com
it1000
학생11!
수업자료 -> 자바리소스 -> 다운로드

수업 자료는 공유 폴더로도, 스터디룸으로도 수업 자료를 준다.

수업 자료는 
koreastudyroom.com 들어가면 수강생 로그인 -> 코리아it아카데미 -> 강남지점 들어가면 그날그날 나온다.

매일 숙제가 있어요

하루에 1시간씩 복습. 검사는 안해! 

질문은 여기로
coding_helper@naver.com
[JAVA_방학특강] 

와이파이 15885890

[핸드폰 무음]
[수업시간 준수]

exe 부터 설치 -> 압출풀기 -> eclipse 폴더



0. 이클립스 사용법
파일루트 안보일때 : 오른쪽 커피콩

1. new - other - javaproject 
기본적으로는 프로젝트 하나, 라이브러리 하나, 소스 하나가 생성된다.

2. src에 new - class
패키지명 이름은 상관 없다. default일 수도 아닐수도.
이후에 코드 만들때는 패키지에 new - class. 참고로 대문자, 특수기호, 띄어쓰기 안된다.

"프로젝트 > 패키지 > 클래스" 

주말을 기점으로 훅 어려워질 거야.

3. 
// C언어 : 절차적 언어 -> [알고리즘] ex)1~100까지 더하면 몇인가? 빠르고 정확한 결과. 수학적.
// 파이썬 : 빅데이터/ 인공지능 대용량 데이터 다루기에 특화되어있다. 자료수집. 함수와 기능이 다양하고 많다.
// 자바 : 객체지향언어 -> 기본 단위 : CLASS 

4. 
규칙 1) public class와 위 java 창, 오른쪽 java 이름 -> 늘 같아야 한다.
규칙 2) 저장을 꼭 해라. *을 없애고 run을 해야한다. 
규칙 3) public static void main (String[] args) {} 이게 자바의 메인이며, 한 글자만 틀려도 실행되지 않는다.
-> public은 다 같이 사용하자. 다른 프로젝트에서도 쓸 수 있다. 객체지향은 기본적으로 공유한다. 
-> static은 객체와 무관하게 돌린다. 독립적인 친구다.
-> void main(String[]) 문자열들을 받아서 아무것도 안 되돌려줄거야. 
규칙 4) 중괄호를 잘 맞춰줘라.

크기조절 ctrl + shift + "+ or -"

숙제는 코드업 들어가서 기초100제. 출력 입력 문제풀이하기. 문제 맞추는 것도 좋지만 코드 숙지하고 주석처리하고 단축키 쓰고
이런게 훈련 목표이다. 너무 어려우면 제껴라. 익숙해지기만 해라.

------------------------------------------------------------------------------
import java.util.Scanner;
	// Ctrl + shift + o -> 자동 임포트 단축키.
public class MainAct {

	public static void main(String[] args) {
// // 주석 - 코더끼리 소통용
		/*
		 *  슬래시 별이 시작지점, 별 슬래시가 끝지점. 여러줄 주석.
		 */
		
		System.out.print("안녕~");
		System.out.println("안녕하세요~");
		// print 함수는 줄 바꿈을 제공하지 않는데, ln은 기본 제공된다. 
		// sysou + CTRL + Space + Enter 가 println 단축키
		
// 변수 -> 정보 저장 시 자료형 명시해야한다. 
		int i = 10; // 정수
		double d = 3.14 ; // 실수
		char c = 'a' ; // 문자 -> 작은 따옴표 이용한다.
		String s = "abc" ; // 문자열
		Boolean b = true ; // 진위형
		//	자료형 변수명 = 값; 이 형식을 지켜야 한다.
		//	변수명 규칙 - 숫자를 쓸 순 있지만 숫자로 시작해서는 안된다.
		//	- 띄어쓰기 안된다. 대신 underbar. 언더바와 달러표시 외 특수문자는 안된다.
		//	대소문자를 구분한다.
		//	이미 있는 문자는 안된다. (파이썬과 달리 갱신 안되는듯.)
		//	식별자와 키워드(예약어)로 구성된다.
		
		int x = 10 ;
		int y = 20 ;
		int sum = x + y ; 
		System.out.println(sum);
		//	코드가 쉬울수록 정확히 알아라.
		//	한 라인에 연산자가 두 개 존재한다. +와 = 중 =(대입 연산자) 우선순위가 낮다. 그래서 + 한 후 = 이 들어가는 것이다.

// 입출력
//	Scanner 클래스에서 sc를 생성한다.
//	자바에서 입력을 받고싶다면, scanner을 먼저 만들어주어야 한다. ctrl shift o 이용해서 자동임포트 해주자.
//	scanner도 클래스이다. 차이는 우리가 만든 건 mainact고 얘는 자바 자체제공인거고.
		//Scanner sc = new Scanner(System.in);
		//int num1 = sc.nextInt();
		//double num2 = sc.nextDouble();
		//System.out.println(num1);
		//System.out.println(num2);
//	console의 빨간네모 -> 진행중인데, 뭔가를 기다리고 있는 것이다. 우리가 직접 num1 과 num2에 들어갈 내용을 콘솔 창에 쳐주면 마무리된다.
//	스캐너를 하나만 만들어놔도 밑에서 여러번 이용가능하다.
		
		//	상수 -> 변하지 않는 수
		//	함수(), 변수
		//	앞에 final을 붙여주면 상수로 선언한다. 이는 앞으로 바꿀 수 없다.
		final double rate = 0.3 ;
		final double PI = 3.141592 ;
		

		int a = 1 ;
		System.out.println(a);
		a = 11;
		//	대입연산자: = 오른쪽의 값을 = 기준 왼쪽의 변수에 대입하는 연산자이다. 변수 = 값 11 -> 11=a; 안된다.
		//	= 방향을 가진 연산자이다.
		System.out.println(a) ;
		
//	형 변환
		int number = (int)10.123 ;
		//	형을 명시했다고 해서 명시적 형 변환이라 한다. 주로 큰 데이터를 작은 데 넣을 때.
		System.out.println(number);
		// 자동 형변환. 주로 작은 데이터를 큰 데 넣을 때.
		double number2 = 3 ;
		System.out.println(number2);
		// 데이터를 다룰 때에는 반드시 자료형을 맞춰서 작성해야 한다. 형변환 믿고 까불지 마.
		// 실무에서 유지 보수 정도, 공인 시험에서나 쓰이지 형변환 거의 안쓴다.
		
// 연습문제 실수 2개 입력 - 합 출력하기!
		//Scanner sc = new Scanner(System.in); //참고로 여기서 Scanner는 마치 int처럼. "형"이다.
		//System.out.print("첫 번째 실수를 입력하세요 :");
		//double n1 = sc.nextDouble();
		//System.out.print("두 번째 실수를 입력하세요 :");
		//double n2 = sc.nextDouble();
		//double rst = n1 + n2 ;
		//System.out.println("두 실수를 더한 값은 :" + (float)rst);
		// double은 가끔 부동소숫점 에러 날 수 있다. 이럴땐 float으로 바꿔주면 된다.double을 전부 float으로.
		
// 연산
		int a1 = 10;
		int b1 = 2;
		int c1 = 3;
		System.out.println(a1/b1); // 몫  
		System.out.println(a1%c1); // 나머지 -> MOD
		System.out.println(a1*1.0/c1); 
		// 같은 자료형끼리 연산시, 답도 같은 자료형으로 리턴된다.
		// 답을 다른 자료형으로 보고싶으면, 해당 자료형을 연산중에 추가해야한다.
		
		b1 = b1 + c1 ;
		System.out.println(b1);
		System.out.println(c1);
		b1 += c1;

// 증감연산자
		b1++; 
		++b1;
		b1--;
		--b1;
		
		int num3 = 10;
		int num4 = num3 ++ ;
		System.out.println(num3 + "/" + num4);
		// 후위 증감연산자는 세상에서 제일 낮다. 따라서 대입연산자부터 들어가고, 그 후에 증감연산자가 된다.
		// 따라서 num3 는 11이 되지만, num4 는 이전의 num3인 10이 유지되는 것이다.
		
		int num5 = 10;
		int num6 = ++num5;
		System.out.println(num5 + " " + num6);
		// 전위 증감연산자는 세상에서 제일 빠르다. 먼저 증감되고, 그 후 대입된다.

	
	}

}