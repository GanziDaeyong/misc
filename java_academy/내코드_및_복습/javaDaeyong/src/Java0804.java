import java.util.Scanner;
public class Java0804 {

// recap
//	static int 연습문제1(int a, int b) {
//		int sum = a+b;
//		return sum;
//	}
//	static double 연습문제1(double a, double b) {
//		double sum = a+b;
//		return sum;
//	}
	
//	static void 연습문제2(int[] arr, int a) {
//		int sw = 0; // 스위치 off
//		for(int i = 0 ; i < arr.length ; i++) {
//			if (arr[i] == a) {
//				sw = 1; // 스위치 on
//				System.out.println("인덱스 : " + i);
//				
//			}
//		}
//		if (sw == 0) {
//			System.out.println("배열에 없음.");
//		}
//	}
// switch 키고 끄고 다시보기 /////////////////////////////////////////////////////////////
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
//		int input1 = sc.nextInt();
//		int input2 = sc.nextInt();
//		double input3 = sc.nextInt();
//		double input4 = sc.nextInt();
//		System.out.println(연습문제1(input1, input2));
//		System.out.println(연습문제1(input3, input4)); // 오버로딩
	
// 연습문제2 - 배열 요소 5개 입력, 특정 수 인덱스 찾기 
//		int [] arr = new int [5];
//		for (int i = 0 ; i<arr.length ; i++) {
//			arr[i] = sc.nextInt();
//		}
//		int input = sc.nextInt();
//		연습문제2(arr, input);

//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////

/*
객체지향언어 -> 객체지향코딩. 코딩 스타일이 실제 대상을 코딩하는 방식으로 변한다.

객체지향의 특징 

1. 추상화 : 자동차 - 같은 대상이더라도 그 대상을 어떻게 추상화할지. 어떤 특성을 뽑아낼지를 결정해야한다. 그래야 같은 코딩이 나오니까.

2. 캡슐화 

2.1. 정보은닉 -> 굳이 코드를 공개하지 않아도 된다. 

2.2. 코드의 재사용성 증가 -> 비용절감, 코드 간결화, 오류 파급효과가 준다.
-> 이미 검증된 캡슐들을 잇는 것 뿐이므로 오류가 생기더라도 오류가 어디 생겼을지 위치 특정이 가능하다. 
-> 더 효율적이고 비용이 절감된다.
-> 결과적으로 기업이 좋아한다. 자바가 짱인 이유.

3. 상속 : 상하관계 존재. + 코드의 재사용성 증가. -> ex. +-x % 에 로그만 더하는 계산기 만들때.
-> 중복 코드가 최소화된다.(간결화와 같은 맥락이긴 한데, 중복이 없다는 게 포인트)

4. 다형성: 같은 코드에 대해 다른 결과. 함수의 주체가 객체가 된다. ex. 같은 input ("짖어!") 이더라도 개는 멍멍 고양이는 냐옹

@@ 관련짓지 마라. 이전것과 아무 관계없다. @@

----------------------------------------------------------------------

객체지향 언어의 기본 단위 == class 
클래스(붕어빵 틀) ----------------인스턴스화==객체화----------------> 객체 == 인스턴스 (붕어빵)
클래스에서 객체를 뽑아내는 행위를 인스턴스화라 한다.

클래스:객체 = 1:n. ex. 붕어빵 틀은 하나여도 붕어빵 개많이 만들 수 있잖아.


*/
	
	
	
	
	
	}

}
